import { useCallback, useEffect, useState } from "react";
import axios from 'axios'
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { EnabledIntegrations, IntegrationsData } from '@/types'
import { Form } from '@/components'

const Home: NextPage = () => {
  const [selectedIntegration, setSelectedIntegration] = useState<EnabledIntegrations | null>(null)
  const [integrationsData, setIntegrationsData] = useState<IntegrationsData>()

  const handleDataRefresh = async () => {
    const updatedDataResponse = await axios({
      method: 'GET',
      url: '/api/integrations'
    })

    setIntegrationsData(updatedDataResponse.data)
  }

  const handleDisconnect = async (e: React.MouseEvent<HTMLParagraphElement>) => {
    if (selectedIntegration) return

    const integration = e.currentTarget.getAttribute('data-integration')

    await axios({
      method: 'POST',
      url: `/api/integrations/${integration}/disconnect`
    })

    return await handleDataRefresh()
  }

  useEffect(() => {
    (
      async () => {
        const response = await axios({
        method: 'GET',
        url: '/api/integrations'
      })

      setIntegrationsData(response.data)
    }
  )()
  }, [])

  console.log('\n---------- LOGGING integrationsData ----------\n', integrationsData)

  return (
    <div className={styles.container}>
      <Head>
        <title>Blinq • Integrations</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Blinq</h1>

        <p className={styles.description}>Manage your integrations here</p>

        <p>Available integrations:</p>

        {
          integrationsData &&
          <div>
            <div className={styles.grid}>
              {
                Object.keys(integrationsData).map((integration) => {
                  return (
                    <div
                      key={integration}
                      className={styles.card}
                    >
                      <h2>{integration}</h2>

                      {integrationsData[integration].connected &&
                        <div>
                          <p className={styles.connected}>Connected</p>
                          <p
                            onClick={(e) => handleDisconnect(e)} data-integration={integration}
                            className={styles.connectionButton}
                          >
                            Disconnect
                          </p>
                        </div>
                      }
 
                      {!integrationsData[integration].connected &&
                        <div>
                          <p className={styles.disconnected}>Not connected</p>
                          <p
                            onClick={() => setSelectedIntegration(integration as EnabledIntegrations)}
                            className={styles.connectionButton}
                          >
                            Connect
                          </p>
                        </div>
                      }
                    </div>
                  )
                })
              }
            </div>

            <div className={styles.grid}>Build here</div>

            {
              selectedIntegration &&
              <Form
                integrationData={integrationsData[selectedIntegration]}
                integration={selectedIntegration}
                setSelectedIntegration={setSelectedIntegration}
                handleDataRefresh={handleDataRefresh}
              />
            }
          </div>
        }
      </main>
    </div>
  );
};

export default Home;
